.\" RCSid "$Id: rhcopy.1,v 1.6 2022/11/16 00:12:49 greg Exp $"
.TH RHCOPY 1 1/15/99 RADIANCE
.SH NAME
rhcopy - copy ray information to/from a holodeck
.SH SYNOPSIS
.B rhcopy
.B dest_holo
[
.B \-u
][
.B \-d
]
.B "\-h src_holo .."
.br
or
.br
.B rhcopy
.B dest_holo
[
.B \-u
][
.B \-d
]
.B "\-p src_hdr src_dpt .."
.br
or
.br
.B rhcopy
.B dest_holo
[
.B \-f{a|f|d}
][
.B \-u
][
.B \-d
]
.B "\-i[odplLv]
.br
or
.br
.B rhcopy
.B src_holo
[
.B \-f{a|f|d}
]
.B "\-o[odplLv]
.SH DESCRIPTION
.I Rhcopy
typically adds ray sample data to an existing holodeck.
In the first form, the ray samples are taken from one or more holodeck files
given after the
.I \-h
option.
In the second form, the ray samples are taken from one or more RADIANCE
picture files and their corresponding
depth buffers, which must be paired on the command line after the
.I \-p
option.
In the third form, ray samples are read from the standard input
based on parameters specified by the
.I \-i
option, which should match (for example) the corresponding
.I \-o
option of an
.I rtrace(1)
command.
Note that a header is not expected on input, and some parameters
are required for correct operation.
A
.I \-f
option may be used to specify raw rather than ASCII data.
.PP
The final form reads rays from the given holodeck and writes
them to the standard output according to the
.I \-o
specification.
.PP
The
.I \-u
option turns on duplicate ray checking.
In some cases, the same ray may already exist in the destination holodeck,
and it would be redundant to add it.
By default,
.I rhcopy
does not check for duplicates, because it takes extra time, and in many
invocations is not necessary, as when copying into an empty holodeck.
.PP
The
.I \-d
option turns off depth checking.
Normally,
.I rhcopy
checks the OBSTRUCTIONS variable of the destination holodeck, and if it is
set to True, makes sure that all contributing rays start outside each
section.
If OBSTRUCTIONS is set to False, then
.I rhcopy
makes sure that any contributing rays end outside each section.
If OBSTRUCTIONS is not set, then this option has no effect.
(See the
.I rholo(1)
man page for a definition of the OBSTRUCTIONS variable.)\0
.PP
.I Rcopy
cannot be used to create a holodeck -- use
.I rholo
for this purpose.
For example, to create an empty holodeck, run
.I rholo
without either the
.I \-n
or
.I \-o
option.
Whatever variables are set by
.I rholo
when the new holodeck is created
are the ones that will affect later rendering or viewing.
Since the ray sample data may be taken from any source,
.I rholo
and
.I rhcopy
may be used together to change certain unalterable holodeck parameters,
such as the section grid geometry.
.SH EXAMPLE
To take data from an existing holodeck after changing the section grid:
.IP "" .2i
rholo new.hdk new.hif
.br
rhcopy new.hdk \-h old.hdk
.PP
A much less efficient way to copy the same data:
.IP "" .2i
rhcopy old.hdk -oodlv | rhcopy new.hdk -iodlv
.PP
To add ray samples from two pictures to the new holodeck:
.IP "" .2i
rhcopy new.hdk \-p view1.hdr view1.zbf view2.hdr view2.zbf
.SH NOTES
.I Rhcopy
attempts to place the beams in the holodeck in a good
order for quick access, but if the data comes from multiple sources,
the results may not be optimal.
For large holodecks, it is sometimes useful to run the
.I rhoptimize(1)
program once all runs of
.I rhcopy
are through.
.SH AUTHOR
Greg Ward
.SH ACKNOWLEDGMENT
This work was supported by Silicon Graphics, Inc.
.SH "SEE ALSO"
getinfo(1), pfilt(1), rcode_depth(1), rcontrib(1),
rhinfo(1), rholo(1), rhoptimize(1), rpict(1), rtrace(1),
