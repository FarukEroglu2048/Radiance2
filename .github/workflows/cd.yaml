name: Import from CVS and Build + Deploy

on:
  push:
    branches: [ cvsimport ]
  schedule:
    - cron: "0 0,6,12,18 * * *"

jobs:
  cvs_import:
    name: "Run CVS Import"
    runs-on: ubuntu-20.04
    outputs:
      HAS_NEW_COMMITS: ${{ steps.ifBuildTrigger.outputs.HAS_NEW_COMMITS }}

    steps:
      - name: Clone this repo to machine
        run: |
          git clone -b master https://github.com/${{ github.repository }}
          cd Radiance
          git branch -a
          git checkout cvsimport
          ls
      
      - name: Install cvsimport
        run: |
          sudo apt-get update
          sudo apt-get install git-cvs

      - name: Run CVS Import
        run: |
          cd Radiance
          bash cvsimport.sh

      - name: Set up build trigger
        id: ifBuildTrigger
        run: |
          cd Radiance
          git checkout master

          unset HAS_NEW_COMMITS
          if [[ "$(git status)" == *"Your branch is ahead of"* ]]; then HAS_NEW_COMMITS='true' ; fi
          echo set-output name=HAS_NEW_COMMITS::${HAS_NEW_COMMITS}
          echo ::set-output name=HAS_NEW_COMMITS::${HAS_NEW_COMMITS}

      - name: Push updates to master branch
        uses: ad-m/github-push-action@master
        with:
          directory: Radiance
          github_token: ${{ secrets.GH_TOKEN }}
          branch: master
        if: steps.ifBuildTrigger.outputs.HAS_NEW_COMMITS
      
  
  build_Windows:
    needs: cvs_import
    name: "Build for Windows"
    runs-on: windows-latest
    if: needs.cvs_import.outputs.HAS_NEW_COMMITS == 'true'
    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Prep semantic release
        run: |
          git checkout cvsimport
          cp CMakeLists.txt ../CMakeLists.txt
          git checkout master
          cp ../CMakeLists.txt CMakeLists.txt

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          arch: 'win64_msvc2017_64'

      - name: Install CMake 
        uses: ilammy/msvc-dev-cmd@v1
      
      - name: Compile
        uses: lukka/run-cmake@v2
        with:
          cmakeGenerator: VS16Win64
          cmakeListsOrSettingsJson: CMakeListsTxtBasic
          cmakeListsTxtPath: ${{ github.workspace }}/CMakeLists.txt
          cmakeBuildType: Release
          buildWithCMakeArgs: "--config Release --target ALL_BUILD"
          buildDirectory: ${{ github.workspace }}/build
          buildWithCMake: true

      - name: set up QT path
        run: |
          setx path "%path%;D:\a\Radiance\Qt\5.12.8\msvc2017_64\bin"
          setx path “%path%;D:\a\Radiance\Qt\5.12.8\msvc2017_64\lib”
      - name: Build installer
        uses: lukka/run-cmake@v2
        with:
          cmakeGenerator: VS16Win64
          cmakeListsOrSettingsJson: CMakeListsTxtBasic
          cmakeListsTxtPath: ${{ github.workspace }}/CMakeLists.txt
          cmakeBuildType: Release
          buildWithCMakeArgs: "--config Release --target PACKAGE"
          buildDirectory: ${{ github.workspace }}/build
          buildWithCMake: true
          
      - name: list files
        run: |
          cp ./build/radiance-*.exe radiance.exe
          ls -R
        shell: bash
      
      - name: Zip Build Artifact
        run: |
          Compress-Archive -U -Path radiance.exe -DestinationPath Radiance_Windows
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_Windows
          path: Radiance_Windows.zip


  build_OSX:
    needs: cvs_import
    name: "Build for OSX"
    runs-on: macos-latest
    if: needs.cvs_import.outputs.HAS_NEW_COMMITS == 'true'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: master

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.12.8'

      - name: Install CMake 
        uses: ilammy/msvc-dev-cmd@v1
      
      - name: Install PackageMaker
        run: |
          mkdir PackageMaker
          cd PackageMaker
          git clone -b cvsimport https://github.com/${{ github.repository }}
          cd Radiance
          ls
          unzip -q -o PackageMaker.app.zip -d /Applications/
        shell: bash
      
      - name: Install XQuartz
        run: |
          wget https://dl.bintray.com/xquartz/downloads/XQuartz-2.7.11.dmg
          sudo hdiutil attach XQuartz-2.7.11.dmg
          sudo installer -package /Volumes/XQuartz-2.7.11/XQuartz.pkg -target / 

      - name: Compile
        env:
          CMAKE_OSX_ARCHITECTURES: x86_64
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake ..
          make -j8

      - name: Build installer
        run: |
          export PATH=$PATH:$Qt5_DIR/bin
          export PATH=$PATH:$Qt5_DIR/lib
          sudo bash PackageMaker/Radiance/macInstall.sh

          cd build/_CPack_Packages/Darwin/PackageMaker/
          sudo cp -r ./radiance*/usr/local/radiance .
          ls
          sudo pkgbuild --identifier radiance.pkg --root "radiance" --install-location "/usr/local/radiance" radiance_Darwin.pkg -c 'set :Dict:BundleIsRelocatable false'
          sudo cp -r radiance_Darwin.pkg ../../../Radiance_OSX.pkg
          du -h -d=0 *

      - name: Zip Build Artifact
        run: |
          zip -r Radiance_OSX.zip ./build/Radiance_OSX.pkg
        
      - name: list files
        run: |
          ls -R
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_OSX
          path: Radiance_OSX.zip


  build_Linux:
    needs: cvs_import
    name: "Build for Linux"
    runs-on: ubuntu-latest
    if: needs.cvs_import.outputs.HAS_NEW_COMMITS == 'true'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: master

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.12.8'

      - name: Install CMake 
        uses: ilammy/msvc-dev-cmd@v1
      

      - name: set dev packages
        run: |
          sudo apt install libglu1-mesa-dev freeglut3-dev

      - name: Compile
        run: |
          export PATH=$PATH:$Qt5_DIR/bin
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j8

      - name: list files
        run: |
          cd $Qt5_DIR
          ls -R
        shell: bash

      - name: Build installer
        run: |
          export PATH=$PATH:$Qt5_DIR/bin
          export PATH=$PATH:$Qt5_DIR/lib
          cd build
          make package -j8

      - name: list files
        run: |
          ls -R
        shell: bash
      

      - name: Zip Build Artifact
        run: |
          cp ./build/radiance-*-Linux.tar.gz radiance-Linux.tar.gz 
          zip -r Radiance_Linux.zip radiance-Linux.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_Linux
          path: Radiance_Linux.zip


  release_installers:
    needs: [build_Windows, build_OSX, build_Linux]
    name: deploy installers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Prep semantic release
        run: |
          git checkout cvsimport
          cp .releaserc.json ../.releaserc.json
          git rev-parse --abbrev-ref HEAD
          git checkout master
          git rev-parse --abbrev-ref HEAD
          cp ../.releaserc.json .releaserc.json

      - name: Download Windows installers
        uses: actions/download-artifact@v2
        with:
          name: Radiance_Linux
      
      - name: Download Windows installers
        uses: actions/download-artifact@v2
        with:
          name: Radiance_OSX
      
      - name: Download Windows installers
        uses: actions/download-artifact@v2
        with:
          name: Radiance_Windows

      - name: Display structure of downloaded files
        run: ls -R

      - name: Semantic release
        run: |
          echo "GITHUB_REF ======================"
          echo $GITHUB_REF
          GITHUB_REF='refs/heads/master'
          echo $GITHUB_REF
          npx semantic-release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

