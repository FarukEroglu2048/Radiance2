name: Update Radiance Branch from CVS and Build + Deploy

on:
  push:
    branches: [ cvsimport ]
  schedule:
    - cron: "0 0,6,12,18 * * *"

jobs:
  cvs_import:
    name: "Run CVS Import"
    runs-on: ubuntu-20.04
    outputs:
      HAS_NEW_COMMITS: ${{ steps.ifBuildTrigger.outputs.HAS_NEW_COMMITS }}

    steps:
      - name: Clone this repo to machine
        run: |
          git clone https://github.com/${{ github.repository }}
          cd Radiance
          git branch -a
          git checkout cvsimport
          ls
      
      - name: Install cvsimport
        run: |
          sudo apt-get install git-cvs

      - name: Run CVS Import
        run: |
          cd Radiance
          bash cvsimport.sh

      - name: Set up build trigger
        id: ifBuildTrigger
        run: |
          cd Radiance
          git checkout master

          unset HAS_NEW_COMMITS
          if [[ "$(git status)" == *"Your branch is ahead of"* ]]; then HAS_NEW_COMMITS='true' ; fi
          echo set-output name=HAS_NEW_COMMITS::${HAS_NEW_COMMITS}
          echo ::set-output name=HAS_NEW_COMMITS::${HAS_NEW_COMMITS}

      - name: Push updates to master branch
        uses: ad-m/github-push-action@master
        with:
          directory: Radiance
          github_token: ${{ secrets.GH_TOKEN }}
          branch: master
        if: steps.ifBuildTrigger.outputs.HAS_NEW_COMMITS
      
  
  build_Windows:
    needs: cvs_import
    name: "Build for Windows"
    runs-on: windows-latest
    if: needs.cvs_import.outputs.HAS_NEW_COMMITS == 'true'
    
    steps:
      - uses: actions/checkout@v2
        with:
          ref: master

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          arch: 'win64_msvc2017_64'

      - name: Install CMake 
        uses: ilammy/msvc-dev-cmd@v1
      
      - name: Compile
        uses: lukka/run-cmake@v2
        with:
          cmakeGenerator: VS16Win64
          cmakeListsOrSettingsJson: CMakeListsTxtBasic
          cmakeListsTxtPath: ${{ github.workspace }}/CMakeLists.txt
          cmakeBuildType: Release
          buildWithCMakeArgs: "--config Release --target ALL_BUILD"
          buildDirectory: ${{ github.workspace }}/build
          buildWithCMake: true

      - name: set up QT path
        run: |
          setx path "%path%;D:\a\Radiance\Qt\5.12.8\msvc2017_64\bin"
          setx path “%path%;D:\a\Radiance\Qt\5.12.8\msvc2017_64\lib”
      - name: Build installer
        uses: lukka/run-cmake@v2
        with:
          cmakeGenerator: VS16Win64
          cmakeListsOrSettingsJson: CMakeListsTxtBasic
          cmakeListsTxtPath: ${{ github.workspace }}/CMakeLists.txt
          cmakeBuildType: Release
          buildWithCMakeArgs: "--config Release --target PACKAGE"
          buildDirectory: ${{ github.workspace }}/build
          buildWithCMake: true
          
      - name: list files
        run: |
          ls -R
        shell: bash
      
      - name: Zip Build Artifact
        run: |
          Compress-Archive -U -Path build\radiance-*.exe -DestinationPath Radiance_Windows
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_Windows
          path: Radiance_Windows.zip


  build_OSX:
    needs: cvs_import
    name: "Build for OSX"
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: master

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.12.8'

      - name: Install CMake 
        uses: ilammy/msvc-dev-cmd@v1
      
      - name: Install PackageMaker
        run: |
          mkdir PackageMaker
          cd PackageMaker
          git clone -b cvsimport https://github.com/${{ github.repository }}
          cd Radiance
          ls
          unzip -q -o PackageMaker.app.zip -d /Applications/
        shell: bash
      
      - name: Install XQuartz
        run: |
          wget https://dl.bintray.com/xquartz/downloads/XQuartz-2.7.11.dmg
          sudo hdiutil attach XQuartz-2.7.11.dmg
          sudo installer -package /Volumes/XQuartz-2.7.11/XQuartz.pkg -target / 

      - name: Compile
        env:
          CMAKE_OSX_ARCHITECTURES: x86_64
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake ..
          make -j8

      - name: Build installer
        run: |
          export PATH=$PATH:$Qt5_DIR/bin
          export PATH=$PATH:$Qt5_DIR/lib
          sudo bash PackageMaker/Radiance/macInstall.sh

          cd build/_CPack_Packages/Darwin/PackageMaker/
          sudo cp -r ./radiance*/usr/local/radiance .
          ls
          sudo pkgbuild --identifier radiance.pkg --root "radiance" --install-location "/usr/local/radiance" radiance_Darwin.pkg
          sudo cp -r radiance_Darwin.pkg ../../../Radiance_OSX.pkg
          du -h -d=0 *
          
        
      - name: list files
        run: |
          ls -R
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_OSX
          path: ./build/Radiance_OSX.pkg


 
  build_Linux:
    needs: cvs_import
    name: "Build for Linux"
    runs-on: ubuntu-latest
    outputs:
      RELEASE_NAME: ${{ steps.get_release_name.outputs.RELEASE_NAME }}
    if: needs.cvs_import.outputs.HAS_NEW_COMMITS == 'true'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: master

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.12.8'

      - name: Install CMake 
        uses: ilammy/msvc-dev-cmd@v1
      

      - name: set dev packages
        run: |
          sudo apt install libglu1-mesa-dev freeglut3-dev

      - name: Compile
        run: |
          export PATH=$PATH:$Qt5_DIR/bin
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j8

      - name: list files
        run: |
          cd $Qt5_DIR
          ls -R
        shell: bash

      - name: Build installer
        run: |
          export PATH=$PATH:$Qt5_DIR/bin
          export PATH=$PATH:$Qt5_DIR/lib
          cd build
          make package -j8

      - name: list files
        run: |
          ls -R
        shell: bash
      
      - name: get release name
        id: get_release_name
        run: |
          cd build
          name=( radiance*.tar.gz )
          [[ -e $name ]] || { echo "Matched no files" >&2; exit 1; }
          release_name="$(basename -s -Linux.tar.gz $name)"
          echo "Release name: $release_name"
          echo ::set-output name=RELEASE_NAME::${release_name}

      - name: Zip Build Artifact
        run: |
          zip -r Radiance_Linux.zip ./build/radiance-*-Linux.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_Linux
          path: Radiance_Linux.zip


  release_installers:
    needs: [build_Windows,build_OSX, build_Linux]
    name: deploy installers
    runs-on: ubuntu-latest
    steps:
      - name: get release name
        id: get_release_name
        run: |
          echo ${{needs.build_Linux.outputs.RELEASE_NAME}} 


      - name: "Checkout Master Branch"
        uses: actions/checkout@v2
        with:
          ref: refs/heads/master
          
      - name: Download Windows installers
        uses: actions/download-artifact@v2
        with:
          name: Radiance_Linux
      
      - name: Download Windows installers
        uses: actions/download-artifact@v2
        with:
          name: Radiance_OSX
      
      - name: Download Windows installers
        uses: actions/download-artifact@v2
        with:
          name: Radiance_Windows
      
      - name: Display structure of downloaded files
        run: ls -R

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{needs.build_Linux.outputs.RELEASE_NAME}} 
          release_name: ${{needs.build_Linux.outputs.RELEASE_NAME}} "($(date +'%Y-%m-%d'))"
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          draft: false
          prerelease: false
      
      - name: Release Asset Radiance_Linux
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: Radiance_Linux.zip
          asset_name: ${{needs.build_Linux.outputs.RELEASE_NAME}}_Linux.zip
          asset_content_type: application/zip
      
      - name: Release Asset Radiance_OSX
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: Radiance_OSX.zip
          asset_name: ${{needs.build_Linux.outputs.RELEASE_NAME}}_OSX.zip
          asset_content_type: application/zip

      - name: Release Asset Radiance_Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: Radiance_Windows.zip
          asset_name: ${{needs.build_Linux.outputs.RELEASE_NAME}}_Windows.zip
          asset_content_type: application/zip
