name: Import from CVS and Build + Test

on:
  push:
    branches: [ cvsimport ]
  schedule:
    - cron: "0 0 * * *"

jobs:
  cvs_import:
    name: "Run CVS Import"
    runs-on: ubuntu-20.04
    outputs:
      HAS_NEW_COMMITS: ${{ steps.ifBuildTrigger.outputs.HAS_NEW_COMMITS }}

    steps:
      - name: Clone this repo to machine
        run: |
          git clone -b master https://github.com/${{ github.repository }}
          cd Radiance
          git branch -a
          git checkout cvsimport
          ls
      
      - name: Install cvsimport
        run: |
          sudo apt-get update
          sudo apt-get install git-cvs

      - name: Run CVS Import
        run: |
          cd Radiance
          bash cvsimport.sh

      - name: Set up build trigger
        id: ifBuildTrigger
        run: |
          cd Radiance
          git checkout master

          unset HAS_NEW_COMMITS
          if [[ "$(git status)" == *"Your branch is ahead of"* ]]; then HAS_NEW_COMMITS='true' ; fi
          echo set-output name=HAS_NEW_COMMITS::${HAS_NEW_COMMITS}
          echo ::set-output name=HAS_NEW_COMMITS::${HAS_NEW_COMMITS}

      - name: Push updates to master branch
        uses: ad-m/github-push-action@master
        with:
          directory: Radiance
          github_token: ${{ secrets.GH_TOKEN }}
          branch: master
        if: steps.ifBuildTrigger.outputs.HAS_NEW_COMMITS
      
  
  build_Windows:
    name: "Build for Windows"
    runs-on: windows-latest
    needs: cvs_import
    if: needs.cvs_import.outputs.HAS_NEW_COMMITS == 'true'

    steps:
      - uses: actions/checkout@v2

      - name: install perl
        run: |
          # run in powershell
          choco uninstall strawberryperl
          choco install strawberryperl --version 5.30.3.1 --force
          perl -version

      - name: install perl pp
        run: |
          unzip PAR.zip
          python merge.py c:\\strawberry\\perl
          ls c:\strawberry\perl\site\bin
          pp --version
          

      - name: override update version
        run: |
          git fetch
          git checkout cvsimport
          cp checkVersion.py ../checkVersion.py
          git checkout master
          cp ../checkVersion.py checkVersion.py
          python checkVersion.py
        shell: bash


      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.12.8'
          mirror: 'http://mirrors.ocf.berkeley.edu/qt/'

      - name: Install CMake 
        uses: ilammy/msvc-dev-cmd@v1
      
      - name: Compile
        uses: lukka/run-cmake@v2
        with:
          cmakeGenerator: VS16Win64
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: ${{ github.workspace }}/CMakeLists.txt
          cmakeBuildType: Release
          cmakeAppendedArgs: '-DBUILD_LIBTIFF=ON'
          buildWithCMakeArgs: "--config Release --target ALL_BUILD"
          buildDirectory: ${{ github.workspace }}/build
          buildWithCMake: true

      - name: list 
        run: |
          echo "List src\util============================="
          ls src\util
          echo "List src\px============================="
          ls src\px
         
      - name: set up QT path
        run: |
          setx path "%path%;D:\a\Radiance\Qt\5.12.8\msvc2017_64\bin"
          setx path “%path%;D:\a\Radiance\Qt\5.12.8\msvc2017_64\lib”

      - name: Build installer
        uses: lukka/run-cmake@v2
        with:
          cmakeGenerator: VS16Win64
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: ${{ github.workspace }}/CMakeLists.txt
          cmakeBuildType: Release
          buildWithCMakeArgs: "--config Release --target PACKAGE"
          buildDirectory: ${{ github.workspace }}/build
          buildWithCMake: true
      
      - name: Zip Compiled Artifact
        run: |
          mv build\_CPack_Packages\win64\NSIS\radiance-*-Windows\ radiance
          Compress-Archive -U -Path radiance\* -DestinationPath Radiance_Windows

      - name: list files
        run: |
          mkdir WindowsBuild
          cp ./build/radiance-*.exe ./WindowsBuild/Radiance_Windows.exe
          cp ./Radiance_Windows.zip ./WindowsBuild/Radiance_Windows.zip
          ls -R
        shell: bash

      - name: Zip Build Artifact
        run: |
          Compress-Archive -U -Path WindowsBuild -DestinationPath Radiance_Windows_both

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_Windows_both
          path: Radiance_Windows_both.zip


  build_OSX:
    name: "Build for OSX"
    runs-on: macos-latest
    needs: cvs_import
    if: needs.cvs_import.outputs.HAS_NEW_COMMITS == 'true'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: master
      
      - name: override update version
        run: |
          git fetch
          git checkout cvsimport
          cp checkVersion.py ../checkVersion.py
          git checkout master
          cp ../checkVersion.py checkVersion.py
          python checkVersion.py
        shell: bash

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.12.8'
          mirror: 'http://mirrors.ocf.berkeley.edu/qt/'


      - name: Install XQuartz
        run: |
          wget https://dl.bintray.com/xquartz/downloads/XQuartz-2.7.11.dmg
          sudo hdiutil attach XQuartz-2.7.11.dmg
          sudo installer -package /Volumes/XQuartz-2.7.11/XQuartz.pkg -target / 

      - name: Compile
        env:
          CMAKE_OSX_ARCHITECTURES: x86_64
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          cmake ..
          make -j8

      - name: Run CPack
        run: |
          export PATH=$PATH:$Qt5_DIR/bin
          export PATH=$PATH:$Qt5_DIR/lib

          cd build
          sudo cpack -G ZIP .
          echo "=============================="
      
      - name: Build pkg installer
        run: |
          cd ./build/_CPack_Packages/Darwin/ZIP/
          sudo cp -r ./radiance*/usr/local/radiance .
          ls
          sudo pkgbuild --identifier radiance.pkg --root "radiance" --install-location "/usr/local/radiance" radiance_Darwin.pkg
          sudo cp -r radiance_Darwin.pkg ../../../../Radiance_OSX.pkg
          du -h -d=0 *

        
      - name: Zip Build Artifact and list files
        run: |
          mkdir OSXBuild
          sudo cp Radiance_OSX.pkg ./OSXBuild/Radiance_OSX.pkg

          sudo mv ./build/_CPack_Packages/Darwin/ZIP/radiance-*-Darwin/usr/local/radiance ./radiance
          sudo zip -r Radiance_OSX.zip ./radiance
          sudo cp ./Radiance_OSX.zip ./OSXBuild/Radiance_OSX.zip

          sudo zip -r Radiance_OSX_both.zip ./OSXBuild
          ls -R
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_OSX_both
          path: Radiance_OSX_both.zip


  build_Linux:
    name: "Build for Linux"
    runs-on: ubuntu-latest
    needs: cvs_import
    if: needs.cvs_import.outputs.HAS_NEW_COMMITS == 'true'
    
    steps:
      - uses: actions/checkout@v2
        with:
          ref: master
      
      - name: override update version
        run: |
          git fetch
          git checkout cvsimport
          cp checkVersion.py ../checkVersion.py
          git checkout master
          cp ../checkVersion.py checkVersion.py
          python checkVersion.py
        shell: bash

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.12.8'
          mirror: 'http://mirrors.ocf.berkeley.edu/qt/'

      - name: Install CMake 
        uses: ilammy/msvc-dev-cmd@v1
      

      - name: set dev packages
        run: |
          sudo apt install libglu1-mesa-dev freeglut3-dev
          sudo sudo apt-get install csh

      - name: Compile
        run: |
          export PATH=$PATH:$Qt5_DIR/bin
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j8

      - name: list files
        run: |
          cd ./build
          ls -R
        shell: bash

      - name: Build installer
        run: |
          export PATH=$PATH:$Qt5_DIR/bin
          export PATH=$PATH:$Qt5_DIR/lib
          cd build
          make package -j8

      - name: Zip Build Artifact
        run: |
          cd  ./build
          zip -r Radiance_Linux.zip radiance-*-Linux.tar.gz
          cp ./Radiance_Linux.zip ./../Radiance_Linux.zip
          

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_Linux
          path: Radiance_Linux.zip


  Test_Windows_1:
    needs: [build_Windows]
    name: Test for Windows 1
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    steps:
      - name: "Checkout Master Branch"
        uses: actions/checkout@v2
        with:
          ref: master
      
      - name: Download Windows installers
        uses: actions/download-artifact@v2
        with:
          name: Radiance_Windows_both
      
      - name: unzip artifacts
        run: |
          unzip Radiance_Windows_both.zip
          unzip WindowsBuild/Radiance_Windows.zip 
      
      - name: Display structure of downloaded files
        run: ls -R

      - name: run tests -util
        shell: pwsh
        run: |
          $Env:RAYPATH = ".;${{ github.workspace }}\lib"
          $Env:PATH += ";${{ github.workspace }}\bin"
          rtrace -version
          cd ./test/util/
          make clean
          make -j8
      

      - name: run tests -gen
        shell: pwsh
        run: |
          $Env:RAYPATH = ".;${{ github.workspace }}\lib"
          $Env:PATH += ";${{ github.workspace }}\bin"
          rtrace -version

          cd ./test/gen/
          make clean
          make -j8

      - name: run tests -cal
        shell: pwsh
        run: |
          $Env:RAYPATH = ".;${{ github.workspace }}\lib"
          $Env:PATH += ";${{ github.workspace }}\bin"
          rtrace -version

          cd ./test/cal/
          make clean
          make -j8

      - name: run tests -px
        shell: cmd
        run: |
          set RAYPATH=.;${{ github.workspace }}\lib
          set PATH=%PATH%;${{ github.workspace }}\bin
          rtrace -version

          cd ./test/px/
          make clean
          make -j8
  
      - name: run tests -renders
        shell: cmd
        run: |
          set RAYPATH=.;${{ github.workspace }}\lib
          set PATH=%PATH%;${{ github.workspace }}\bin
          rtrace -version

          cd ./test/renders/
          make clean
          make batch1 -j8 

      - name: The job has failed
        if: ${{ failure() }}
        shell: pwsh
        run: |
          Compress-Archive -U -Path ./test/* -DestinationPath Radiance_Windows_Failed
          
      - name: Upload artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_Windows_Failed
          path: Radiance_Windows_Failed.zip

  Test_Windows_2:
    needs: [build_Windows]
    name: Test for Windows 2
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    steps:
      - name: "Checkout Master Branch"
        uses: actions/checkout@v2
        with:
          ref: master
      
      - name: Download Windows installers
        uses: actions/download-artifact@v2
        with:
          name: Radiance_Windows_both
      
      - name: unzip artifacts
        run: |
          unzip Radiance_Windows_both.zip
          unzip WindowsBuild/Radiance_Windows.zip 
      
      - name: Display structure of downloaded files
        run: ls -R

      - name: run tests -renders
        shell: cmd
        run: |
          set RAYPATH=.;${{ github.workspace }}\lib
          set PATH=%PATH%;${{ github.workspace }}\bin
          rtrace -version

          cd ./test/renders/
          make clean
          make batch2 -j8 

      - name: The job has failed
        if: ${{ failure() }}
        shell: pwsh
        run: |
          Compress-Archive -U -Path ./test/* -DestinationPath Radiance_Windows_Failed
          
      - name: Upload artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_Windows_Failed
          path: Radiance_Windows_Failed.zip

  Test_Windows_3:
    needs: [build_Windows]
    name: Test for Windows 3
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    steps:
      - name: "Checkout Master Branch"
        uses: actions/checkout@v2
        with:
          ref: master
      
      - name: Download Windows installers
        uses: actions/download-artifact@v2
        with:
          name: Radiance_Windows_both
      
      - name: unzip artifacts
        run: |
          unzip Radiance_Windows_both.zip
          unzip WindowsBuild/Radiance_Windows.zip 
      
      - name: Display structure of downloaded files
        run: ls -R

      - name: run tests -renders 3
        shell: cmd
        run: |
          set RAYPATH=.;${{ github.workspace }}\lib
          set PATH=%PATH%;${{ github.workspace }}\bin
          rtrace -version

          cd ./test/renders/
          make clean
          make batch3 -j8 

      - name: The job has failed
        if: ${{ failure() }}
        shell: pwsh
        run: |
          Compress-Archive -U -Path ./test/* -DestinationPath Radiance_Windows_Failed
          
      - name: Upload artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_Windows_Failed
          path: Radiance_Windows_Failed.zip

  Test_Windows_4:
    needs: [build_Windows]
    name: Test for Windows 4
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    steps:
      - name: "Checkout Master Branch"
        uses: actions/checkout@v2
        with:
          ref: master
      
      - name: Download Windows installers
        uses: actions/download-artifact@v2
        with:
          name: Radiance_Windows_both
      
      - name: unzip artifacts
        run: |
          unzip Radiance_Windows_both.zip
          unzip WindowsBuild/Radiance_Windows.zip 
      
      - name: Display structure of downloaded files
        run: ls -R

      
      - name: run tests -renders 4
        shell: cmd
        run: |
          set RAYPATH=.;${{ github.workspace }}\lib
          set PATH=%PATH%;${{ github.workspace }}\bin
          rtrace -version

          cd ./test/renders/
          make clean
          make batch4 -j8 

      - name: The job has failed
        if: ${{ failure() }}
        shell: pwsh
        run: |
          Compress-Archive -U -Path ./test/* -DestinationPath Radiance_Windows_Failed
          
      - name: Upload artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_Windows_Failed
          path: Radiance_Windows_Failed.zip

  Test_OSX_1:
    needs: [build_OSX]
    name: "Test for OSX 1"
    runs-on: macos-latest

    steps:
      - name: get os version
        run: |
          uname -a
          echo "=============================="
          sw_vers -productVersion


      - name: "Checkout Master Branch"
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Download OSX installers
        uses: actions/download-artifact@v2
        with:
          name: Radiance_OSX_both
      
      - name: unzip artifacts
        run: |
          unzip Radiance_OSX_both.zip
          unzip OSXBuild/Radiance_OSX.zip
      
      - name: Display structure of downloaded files
        run: ls -R
    
      - name: run tests -util
        run: |
          export RAYPATH=.:${{ github.workspace }}/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/radiance/bin
          rtrace -version
          cd ./test/util/
          
          make clean
          make -j8
      
      - name: run tests -gen
        run: |
          export RAYPATH=.:${{ github.workspace }}/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/radiance/bin
          rtrace -version
          cd ./test/gen/
          
          make clean
          make -j8

      - name: run tests -cal
        run: |
          export RAYPATH=.:${{ github.workspace }}/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/radiance/bin
          rtrace -version
          cd ./test/cal/
          
          make clean
          make -j8

      - name: run tests -px
        run: |
          export RAYPATH=.:${{ github.workspace }}/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/radiance/bin
          rtrace -version
          cd ./test/px/
          
          make clean
          make -j8

      - name: run tests -renders 1
        run: |
          export RAYPATH=.:${{ github.workspace }}/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/radiance/bin
          rtrace -version

          cd ./test/renders/
          make clean
          make batch1 -j8
      
          
      - name: run tests -renders 3
        run: |
          export RAYPATH=.:${{ github.workspace }}/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/radiance/bin
          rtrace -version

          cd ./test/renders/
          make clean
          make batch3 -j8
      
      - name: The job has failed
        if: ${{ failure() }}
        run: |
          zip -r Radiance_Mac_Failed.zip ./test/*
          
      - name: Upload artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_Mac_Failed
          path: Radiance_Mac_Failed.zip
  
  Test_OSX_2:
    needs: [build_OSX]
    name: "Test for OSX 2"
    runs-on: macos-latest

    steps:
      - name: get os version
        run: |
          uname -a
          echo "=============================="
          sw_vers -productVersion


      - name: "Checkout Master Branch"
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Download OSX installers
        uses: actions/download-artifact@v2
        with:
          name: Radiance_OSX_both
      
      - name: unzip artifacts
        run: |
          unzip Radiance_OSX_both.zip
          unzip OSXBuild/Radiance_OSX.zip
      
      - name: Display structure of downloaded files
        run: ls -R
    
      - name: run tests -renders 2
        run: |
          export RAYPATH=.:${{ github.workspace }}/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/radiance/bin
          rtrace -version

          cd ./test/renders/
          make clean
          make batch2 -j8

      - name: run tests -renders 4
        run: |
          export RAYPATH=.:${{ github.workspace }}/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/radiance/bin
          rtrace -version

          cd ./test/renders/
          make clean
          make batch4 -j8

      - name: The job has failed
        if: ${{ failure() }}
        run: |
          zip -r Radiance_Mac_Failed.zip ./test/*
          
      - name: Upload artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_Mac_Failed
          path: Radiance_Mac_Failed.zip

  Test_Linux_1:
    needs: [build_Linux]
    name: "Test for Linux 1"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout Master Branch"
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Download Linux installers
        uses: actions/download-artifact@v2
        with:
          name: Radiance_Linux
      
      - name: unzip artifacts
        run: |
          unzip Radiance_Linux.zip
          ls
          echo "========== Extracting tar.gz ==========="
          tar -xvf radiance-*-Linux.tar.gz
          ls
          echo "========== Extracting tar ==========="
          

      - name: copy compiled folder
        run: |
          mkdir buildRad
          sudo cp -avr ./radiance-*-Linux/usr/local/radiance ./buildRad

      - name: Display structure of downloaded files
        run: ls -R
      
      - name: run tests -util
        run: |
          export RAYPATH=.:${{ github.workspace }}/buildRad/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/buildRad/radiance/bin
          rtrace -version
          cd ./test/util/
          
          make clean
          make -j8
      
      - name: run tests -gen
        run: |
          export RAYPATH=.:${{ github.workspace }}/buildRad/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/buildRad/radiance/bin
          rtrace -version
          cd ./test/gen/
          
          make clean
          make -j8

      - name: run tests -cal
        run: |
          export RAYPATH=.:${{ github.workspace }}/buildRad/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/buildRad/radiance/bin
          rtrace -version
          cd ./test/cal/
          
          make clean
          make -j8

      - name: run tests -px
        run: |
          export RAYPATH=.:${{ github.workspace }}/buildRad/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/buildRad/radiance/bin
          rtrace -version
          cd ./test/px/
          
          make clean
          make -j8

      - name: run tests -renders 1
        run: |
          export RAYPATH=.:${{ github.workspace }}/buildRad/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/buildRad/radiance/bin
          rtrace -version

          cd ./test/renders/
          make clean
          make batch1 -j8
      
      - name: run tests -renders 3
        run: |
          export RAYPATH=.:${{ github.workspace }}/buildRad/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/buildRad/radiance/bin
          rtrace -version

          cd ./test/renders/
          make clean
          make batch3 -j8

      - name: The job has failed
        if: ${{ failure() }}
        run: |
          zip -r Radiance_Linux_Failed.zip ./test/*
          
      - name: Upload artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_Linux_Failed
          path: Radiance_Linux_Failed.zip

  Test_Linux_2:
    needs: [build_Linux]
    name: "Test for Linux 2"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout Master Branch"
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Download Linux installers
        uses: actions/download-artifact@v2
        with:
          name: Radiance_Linux
      
      - name: unzip artifacts
        run: |
          unzip Radiance_Linux.zip
          ls
          echo "========== Extracting tar.gz ==========="
          tar -xvf radiance-*-Linux.tar.gz
          ls
          echo "========== Extracting tar ==========="
          

      - name: copy compiled folder
        run: |
          mkdir buildRad
          sudo cp -avr ./radiance-*-Linux/usr/local/radiance ./buildRad

      - name: Display structure of downloaded files
        run: ls -R
      

      - name: run tests -renders 2
        run: |
          export RAYPATH=.:${{ github.workspace }}/buildRad/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/buildRad/radiance/bin
          rtrace -version

          cd ./test/renders/
          make clean
          make batch2 -j8
      
      - name: run tests -renders 4
        run: |
          export RAYPATH=.:${{ github.workspace }}/buildRad/radiance/lib
          export PATH=$PATH:${{ github.workspace }}/buildRad/radiance/bin
          rtrace -version

          cd ./test/renders/
          make clean
          make batch4 -j8

      - name: The job has failed
        if: ${{ failure() }}
        run: |
          zip -r Radiance_Linux_Failed.zip ./test/*
          
      - name: Upload artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: Radiance_Linux_Failed
          path: Radiance_Linux_Failed.zip


  release_installers:
    name: deploy installers
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Master Branch"
        uses: actions/checkout@v2
        with:
          ref: master
      
      - name: Check date if release
        id: if_release
        run: |
          IF_RELEASE=false
          if [[ $(date +%u) -gt 6 ]]; then echo "Today is Sunday"; IF_RELEASE=true; fi
          if $IF_RELEASE; then echo "Release a new version today"; fi
          echo ::set-output name=RELEASE_TODAY::${IF_RELEASE}

      - name: check release name/note
        run: |
          echo "${{steps.if_release.outputs.RELEASE_TODAY}}"

      - name: test if release
        if: ${{steps.if_release.outputs.RELEASE_TODAY}} == true
        run: |
          echo "${{steps.if_release.outputs.RELEASE_TODAY}}"

      - name: test if release
        if: ${{steps.if_release.outputs.RELEASE_TODAY}} == "true"
        run: |
          echo "${{steps.if_release.outputs.RELEASE_TODAY}}"

      - name: test if release
        if: ${{steps.if_release.outputs.RELEASE_TODAY}} == false
        run: |
          echo "${{steps.if_release.outputs.RELEASE_TODAY}}"

      - name: test if release
        if: ${{steps.if_release.outputs.RELEASE_TODAY}} == "false"
        run: |
          echo "${{steps.if_release.outputs.RELEASE_TODAY}}"
